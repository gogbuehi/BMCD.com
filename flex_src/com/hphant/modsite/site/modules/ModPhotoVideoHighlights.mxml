<?xml version="1.0" encoding="utf-8"?>
<ModCanvas width="0" height="0" xmlns="com.hphant.modsite.site.modules.*"  currentState="state0"
	       xmlns:mx="http://www.adobe.com/2006/mxml" 
	       xmlns:text="com.hphant.modsite.site.assets.text.*"
	       backgroundAlpha="1"
	       visible="false"
	       xmlns:images="com.hphant.modsite.site.assets.images.*" xmlns:video="com.hphant.modsite.site.assets.video.*">
			<mx:Script>
				<![CDATA[
					import com.hphant.utils.XMLUtility;
					import com.hphant.modsite.site.modules.interfaces.IModule;
					import mx.core.Application;
					import com.hphant.skins.video.VideoSkinEvent;
					import com.hphant.skins.video.ShowCase;
					import com.hphant.modsite.site.events.MALinkClickEvent;
					import mx.effects.easing.Exponential;
					import mx.effects.easing.Back;
					import com.hphant.modsite.data.Size;
					import mx.effects.easing.Elastic;
					import mx.events.TweenEvent;
					import mx.effects.easing.Bounce;
					import mx.events.EffectEvent;
					import mx.events.MoveEvent;
					import mx.effects.Move;
					import com.hphant.utils.Logger;
					[Bindable]
					private var videoX:Number;
					[Bindable]
					private var videoResizeX:Number;
					[Bindable]
					private var videoY:Number;
					[Bindable]
					private var textX:Number;
					[Bindable]
					private var textY:Number;
					[Bindable]
					private var availabelTextWidth:Number;
					[Bindable]
					private var textPodWidth:Number;
					private var minTextWidth:Number = 200;
					private var maxTextWidth:Number = 340;
					[Bindable]
					private var imageSize:Size = new Size({width:220, height:280});
					[Bindable]
					private var videoSize:Size = new Size({width:560, height:280});
					[Bindable]
					private var img:XMLList;
					[Bindable]
					private var vid:XMLList;
					[Bindable]
					private var txt:XMLList;
					protected override function commitProperties():void{
						if(this.xmlChanged && this._xml)
						{
							img = this._xml.div.(attribute("class").toLowerCase()=="image");
							this.imageSize = new Size((img.img.length()>0) ? {width:img.img.@width,height:img.img.@height} :
											 (img.a.img.length()>0) ? {width:img.a.img.@width,height:img.a.img.@height} : {width:220, height:280});
							XMLUtility.insertBlankNode(img.img);
							XMLUtility.insertBlankNode(img.a.img);
							
							vid = this._xml.ul.(attribute("class")=="MAVideoListController" || attribute("class").toLowerCase()=="videos");	
							XMLUtility.insertBlankNode(vid.li.embed);
							var embed:XML = vid.li.embed[0];
							txt = this._xml.p.(attribute("class").toLowerCase()=="body");
							XMLUtility.insertBlankNode(txt);
							this.videoSize = new Size((embed) ? {width:embed.@width,height:embed.@height} : {width:560, height:280});
							/* if(this.currentState=="opened"){
								this.image.xml = img;
								this.imageText.xml = 
								this.videoController.xml = vid;
								this.xmlChanged = false;
							} */
							this.xmlChanged = false;
							if(this.currentState>="state8"){
								this.image.xml = img;
								this.imageText.xml = txt;
								this.videoController.xml = vid;
							}
						} else if(this.xmlChanged){
							img = null;
							txt = null;
							vid = null;
							if(this.currentState>="state8"){
								this.image.xml = img;
								this.imageText.xml = txt;
								this.videoController.xml = vid;
							}
							this.xmlChanged = false;
						}
						super.commitProperties();
					}
					private function videoSizeUpdateComplete():void{
						this.videoSize = (this.currentState=="state8") ? (new Size({width:this.video.width,height:this.video.height})) : this.videoSize;
						this.videoX = this.contentHolder.width - this.videoSize.width;
						this.videoResizeX = this.contentHolder.width - this.video.width
						this.videoY = this.contentHolder.height/2 - this.videoSize.height/2;
						var vg:Number = this.getStyle('verticalGap');
						vg = (vg) ? vg : 0;
						this.availabelTextWidth = this.videoHolder.x - this.image.width - vg;
						this.videoHolder.x = (this.currentState=="state8") ? this.videoResizeX : this.videoX;
						textPositionUpdate();
					}
					private function textPositionUpdate():void{
						var vg:Number = this.getStyle('verticalGap');
						vg = (vg) ? vg : 0;
						var cr:Number = this.image.getStyle('cornerRadius');
						var pt:Number = this.textHolder.getStyle('paddingTop');
						var pb:Number = this.textHolder.getStyle('paddingBottom');
						if(this.availabelTextWidth<this.minTextWidth){
							this.textHolder.width = this.minTextWidth;
						} else if(this.availabelTextWidth>this.maxTextWidth){
							this.textHolder.width = this.maxTextWidth;
						} else {
							this.textHolder.width = this.availabelTextWidth;
						}
						//this.imageText.width = this.textHolder.width - this.textHolder.getStyle('paddingLeft') - this.textHolder.getStyle('paddingRight')
						this.imageText.validateNow();
						var tHeight:Number = this.imageText.textHeight;
						this.imageText.height = (tHeight<=this.image.height-cr*2-pt-pb) ? tHeight : this.image.height-cr*2-pt-pb;
						textHolder.y = this.textY = this.image.y + cr;
						if(this.availabelTextWidth>this.textHolder.width){
							this.textX = this.image.x + this.image.width - 20;
						} else {
							this.textX = this.videoHolder.x - this.textHolder.width - vg;
						}
						if(!textMousing){
							textHolder.x = this.textX;
						}
						
					}
					private function centerVideo(e:TweenEvent):void{
						//this.video.y = this.contentHolder.height/2 -this.video.height/2;
						
					}
					private var textMousing:Boolean = true;
					private function textRollOut():void{
						if (this.textMover.isPlaying){
							this.textMover.stop();
						}
						if(!this.textMover.hasEventListener(EffectEvent.EFFECT_END)){
							this.textMover.addEventListener(EffectEvent.EFFECT_END,this.setTextMousingOff);
						}
						this.textMover.xTo = this.textX;
						this.textMover.xFrom = this.textHolder.x;
						this.textMover.play();
					}
					private function setTextMousingOff(e:EffectEvent):void{
						this.textMousing = false;
						if(this.textMover.hasEventListener(EffectEvent.EFFECT_END)){
							this.textMover.removeEventListener(EffectEvent.EFFECT_END,this.setTextMousingOff);
						}
					}
					private function textRollOver():void{
						if (this.textMover.isPlaying){
							this.textMover.stop();
						}
						this.textMousing = true;
						this.textMover.xTo = this.image.x + this.image.width - 20;
						this.textMover.xFrom = this.textHolder.x;
						this.textMover.play();
					}
					private function imageClicked(e:MALinkClickEvent):void{
						log("Image Clicked : "+e.item);
						var href:String = e.item.a.@href;
						this.uriManager.goToURI(href);
					}
					[Bindable]
					private var videoControlls:ShowCase = new ShowCase();
					private function applyVideoSkin():void{
						this.video.skinHolder.addChild(videoControlls);
						this.videoControlls.addEventListener(VideoSkinEvent.NEXT_CLICK,this.videoNextClick);
						this.videoControlls.addEventListener(VideoSkinEvent.PREVIOUS_CLICK,this.videoPreviousClick);
						this.videoControlls.addEventListener(VideoSkinEvent.SOUND_OFF_CLICK,this.videoSoundOffClick);
						this.videoControlls.addEventListener(VideoSkinEvent.SOUND_ON_CLICK,this.videoSoundOnClick);
					}
					private function videoNextClick(event:VideoSkinEvent):void{
						this.videoController.playNextVideo();
					}
					private function videoPreviousClick(event:VideoSkinEvent):void{
						this.videoController.playPreviousVideo();
					}
					private function videoSoundOnClick(event:VideoSkinEvent):void{
						this.videoControlls.soundOff.visible = true;
						this.videoControlls.soundOn.visible = false;
						this.video.videoPlayer.volume = 0;
					}
					private function videoSoundOffClick(event:VideoSkinEvent):void{
						this.videoControlls.soundOff.visible = false;
						this.videoControlls.soundOn.visible = true;
						this.video.videoPlayer.volume = 1;
					}
					public override function duplicate():IModule{
						var m:ModPhotoVideoHighlights = new ModPhotoVideoHighlights();
						m.xml = this.xml;
						m.currentState = this.currentState;
			m.height = this.height;
			m.width = this.width;
						m.validateNow();
						return m;
					}
			]]>
		</mx:Script>
	<mx:Resize id="videoResizer" />
	<mx:Resize id="imageResizer" />
	<mx:Move id="textMover" target="{this.textHolder}" easingFunction="{mx.effects.easing.Exponential.easeOut}"/>
	<mx:Resize id="textResizer" />
	<video:MAVideoListController id="videoController" videoPlayer="{this.video}" autoLoad="true"/>
	<mx:Canvas clipContent="false" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" id="contentHolder" updateComplete="{this.videoSizeUpdateComplete()}">
		<mx:Box id="videoHolder" width="{this.videoSize.width}" height="100%" x="{this.videoX}" verticalScrollPolicy="off" horizontalScrollPolicy="off" clipContent="false" verticalAlign="middle" horizontalAlign="center">
			<video:MAVideoDisplay id="video" sizeConstraint="LockHeight" height="0" width="0" maMinWidth="0" maMaxWidth="{contentHolder.width-image.width-24}" resizeEffect="{this.videoResizer}" creationComplete="{applyVideoSkin()}"/>
		</mx:Box>
		<mx:Canvas width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" id="textLayer">
		<mx:Box mouseOver="{this.textRollOver()}" mouseOut="{this.textRollOut()}"  verticalScrollPolicy="off" horizontalScrollPolicy="off" backgroundAlpha="1" paddingLeft="25" borderThickness="0" id="textHolder" styleName="imageVideoText" >
			<text:MAText id="imageText" width="100%" truncateToFit="true"/>
		</mx:Box>
		</mx:Canvas>
		<mx:Box width="{this.imageSize.width}" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" clipContent="false" verticalAlign="middle" horizontalAlign="center">
			<images:MAImage id="image" autoLoad="true" autoSize="false" width="0" height="0" resize="{this.textPositionUpdate()}" creationComplete="{this.image.addEventListener(MALinkClickEvent.LINK_CLICKED,imageClicked)}" />
		</mx:Box>
		
	</mx:Canvas>
	<states>
		<mx:State name="state0">
			<mx:SetProperty target="{this}" name="visible" value="true"/>
			<mx:RemoveChild target="{this.contentHolder}"/>
			<mx:RemoveChild target="{this.textHolder}"/>
		</mx:State>
		<mx:State name="state1" basedOn="state0">
			<mx:SetProperty target="{this}" name="height" value="305"/>
			<mx:SetProperty target="{this}" name="width" value="984"/>
		</mx:State>
		<mx:State name="state2" basedOn="state1">
			<mx:AddChild target="{this.contentHolder}"/>
		</mx:State>
		<mx:State name="state3" basedOn="state2">
			<mx:SetProperty target="{this.video}" name="width" value="{this.videoSize.width}"/>
			<mx:SetProperty target="{this.video}" name="height" value="{this.videoSize.height}"/>
			<mx:SetProperty target="{this.image}" name="width" value="{this.imageSize.width}"/>
			<mx:SetProperty target="{this.image}" name="height" value="{this.imageSize.height}"/>
		</mx:State>
		<mx:State name="state4" basedOn="state3">
			<mx:AddChild relativeTo="{this.textLayer}" target="{this.textHolder}"/>
		</mx:State>
		<mx:State name="state5" basedOn="state4">
			<mx:SetProperty target="{this.image}" name="xml" value="{this.img}"/>
		</mx:State>
		<mx:State name="state6" basedOn="state5">
			<mx:SetProperty target="{this.imageText}" name="xml" value="{this.txt}"/>
		</mx:State>
		<mx:State name="state7" basedOn="state6">
			<mx:SetProperty target="{this.textHolder}" name="x" value="{this.image.width-20}"/>
		</mx:State>
		<mx:State name="state8" basedOn="state7">
			<mx:SetProperty target="{this.videoController}" name="xml" value="{this.vid}"/>
		</mx:State>
	</states>
	<transitions>
   		<mx:Transition fromState="state0" toState="state8">
   			<mx:Sequence>
   				<mx:AddChildAction target="{this.contentHolder}"/>
   				<mx:AddChildAction target="{this.textHolder}" relativeTo="{this.textLayer}"/>
   				<mx:SetPropertyAction target="{this}" name="height" value="305"/>
   				<mx:SetPropertyAction target="{this}" name="width" value="984"/>
				<mx:SetPropertyAction target="{this.image}" name="xml" value="{this.img}"/>
				<mx:SetPropertyAction target="{this.imageText}" name="xml" value="{this.txt}"/>
				<mx:SetPropertyAction target="{this.videoController}" name="xml" value="{this.vid}"/>
				<mx:SetPropertyAction target="{this.video}" name="width" value="{this.videoSize.width}"/>
				<mx:SetPropertyAction target="{this.video}" name="height" value="{this.videoSize.height}"/>
				<mx:SetPropertyAction target="{this.image}" name="width" value="{this.imageSize.width}"/>
				<mx:SetPropertyAction target="{this.image}" name="height" value="{this.imageSize.height}"/>
   			</mx:Sequence>
   		</mx:Transition>
   		<mx:Transition fromState="state8" toState="state0">
   			<mx:Sequence>
   				<mx:SetPropertyAction target="{this}" name="height" value="0"/>
   				<mx:SetPropertyAction target="{this}" name="width" value="0"/>
				<mx:SetPropertyAction target="{this.video}" name="width" value="0"/>
				<mx:SetPropertyAction target="{this.video}" name="height" value="0"/>
				<mx:SetPropertyAction target="{this.image}" name="width" value="0"/>
				<mx:SetPropertyAction target="{this.image}" name="height" value="0"/>
   				<mx:RemoveChildAction target="{this.textHolder}"/>
   				<mx:RemoveChildAction target="{this.contentHolder}"/>
   			</mx:Sequence>
   		</mx:Transition>
		<mx:Transition fromState="state0" toState="state1">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
				<mx:Resize target="{this}" widthTo="250" heightTo="30" duration="500" easingFunction="{mx.effects.easing.Back.easeOut}"/>
				<mx:Resize target="{this}"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state1" toState="state2">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
				<mx:AddChildAction target="{this.contentHolder}"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state2" toState="state3">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
				<mx:Parallel>
					<mx:Resize target="{this.image}" easingFunction="{mx.effects.easing.Exponential.easeOut}"/>
					<mx:Resize target="{this.video}" tweenUpdate="{this.centerVideo(event)}" easingFunction="{mx.effects.easing.Exponential.easeOut}"/>
				</mx:Parallel>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state3" toState="state4">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
				<mx:AddChildAction target="{this.textHolder}"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state5" toState="state4">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="*" toState="state5">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
				<mx:SetPropertyAction target="{this.image}"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="*" toState="state6">
			<mx:Sequence effectEnd="{textPositionUpdate();this.dispatchStateReached()}">
				<mx:SetPropertyAction target="{this.imageText}"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="*" toState="state7">
			<mx:Sequence effectEnd="{textRollOut();this.dispatchStateReached()}">
				<mx:Move target="{this.textHolder}"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state7" toState="state8">
			<mx:Sequence effectEnd="{this.dispatchTransitionCompleted()}">
				<mx:SetPropertyAction target="{this.videoController}"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state4" toState="state3">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
				<mx:RemoveChildAction target="{this.textHolder}"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state3" toState="state2">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
				<mx:Parallel>
					<mx:Resize target="{this.image}"/>
					<mx:Resize target="{this.video}" tweenUpdate="{this.centerVideo(event)}"/>
				</mx:Parallel>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state2" toState="state1">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
				<mx:RemoveChildAction target="{this.contentHolder}"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state1" toState="state0">
			<mx:Sequence effectEnd="{this.dispatchTransitionCompleted()}">
				<mx:Resize target="{this}" widthTo="250" heightTo="30" duration="500" easingFunction="{mx.effects.easing.Exponential.easeOut}"/>
				<mx:Resize target="{this}"/>
			</mx:Sequence>
		</mx:Transition>
	</transitions>
</ModCanvas>

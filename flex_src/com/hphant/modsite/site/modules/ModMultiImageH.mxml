<?xml version="1.0" encoding="utf-8"?>
<ModCanvas width="0" height="0" currentState="state0" xmlns="com.hphant.modsite.site.modules.*" xmlns:mx="http://www.adobe.com/2006/mxml"
		   backgroundAlpha="1"
		   visible="false"
	       xmlns:text="com.hphant.modsite.site.assets.text.*" xmlns:images="com.hphant.modsite.site.assets.images.*">
	<mx:VBox verticalScrollPolicy="off" horizontalScrollPolicy="off" autoLayout="true" width="100%" height="100%" clipContent="false">
		<text:MAText alpha="1" id="title" styleName="title" width="100%" height="30"/>
		<images:MAImageSelectorH styleName="modMultiImageH" imageWidth="{iwidth}" clipContent="false" imageHeight="{iheight}" creationComplete="{addSelectorEventListeners()}" horizontalAlign="center" id="selector" width="{this.width-this.getStyle('paddingLeft')-this.getStyle('paddingRight')}" verticalScrollPolicy="off"/>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import com.hphant.modsite.data.DataToImageTranslator;
			import mx.collections.XMLListCollection;
			import com.hphant.utils.XMLUtility;
			import com.hphant.modsite.site.modules.interfaces.IModule;
			import com.hphant.modsite.site.events.MALinkClickEvent;
			import mx.effects.easing.Exponential;
			import mx.events.EffectEvent;
			import mx.effects.easing.Back;
			import com.hphant.modsite.site.style.CSSInstance;
			private var _translator:DataToImageTranslator = DataToImageTranslator.getInstance();
			[Bindable]
			private var iwidth:Number = 180;
			[Bindable]
			private var iheight:Number = 135;
			protected override function commitProperties():void{
				if(this.xmlChanged){
					txt = this._xml.h1.(attribute("class").toLowerCase()=="title");
					XMLUtility.insertBlankNode(txt);
					var ul:XMLListCollection;
					try{
						ul = new XMLListCollection(XMLList(XMLList(this._xml.ul.(attribute("class").toLowerCase()=="maimageselectorh" || attribute("class").toLowerCase()=="images")).toXMLString()));
						for each(var table:XML in _xml.table){
							ul.addItem(XMLList(this._translator.translate(XML(table))));
						}
					}catch (e:Error){
						ul = new XMLListCollection();
					}
					img = XMLList('<ul>'+ul.source.li+'</ul>');
					log('The Image List now Looks Like this:\n'+img);
					var cnt:Number = img.li.length();
					//iwidth = (cnt>0) ? Math.floor(900/cnt) : 180;
					//iheight = Math.floor(iwidth*.75);
					if (this.currentState>="state3"){
						this.selector.xml = null;
						this.title.xml = txt;
						this.selector.imageHeight = iheight;
						this.selector.imageWidth = iwidth;
						this.selector.xml = this.img;
						
					}
					this.xmlChanged = false;
				}
				super.commitProperties();
			}
			[Bindable]
			private var txt:XMLList;
			[Bindable]
			private var img:XMLList;
			private function selectorEffectEnd(e:EffectEvent):void{
				 this.dispatchStateReached();
			}
			private function addSelectorEventListeners():void{
				this.selector.addEventListener("Special"+EffectEvent.EFFECT_END,selectorEffectEnd);
				this.selector.addEventListener(MALinkClickEvent.LINK_CLICKED,linkClickedListener);
			}
			private function linkClickedListener(e:MALinkClickEvent):void{
				log("Link Clicked : "+e.item);
				var href:String = e.item.a.@href;
				this.uriManager.goToURI(href);
			}
			public override function duplicate():IModule{
				var m:ModMultiImageH = new ModMultiImageH();
				m.xml = this.xml;
				m.currentState = this.currentState;
			m.height = this.height;
			m.width = this.width;
				m.validateNow();
				return m;
			}
			
		]]>
	</mx:Script>
	<states>
		<mx:State name="state0">
			<mx:SetProperty target="{this}" name="visible" value="true"/>
		</mx:State>
		<mx:State name="state1" basedOn="state0">
			<mx:SetProperty target="{this}" name="height"/>
			<mx:SetProperty target="{this}" name="width" value="984"/>
		</mx:State>
		<mx:State name="state2" basedOn="state1">
			<!--<mx:SetProperty target="{this.title}"/>-->
		</mx:State>
		<mx:State name="state3" basedOn="state2">
			<!--<mx:SetProperty target="{this.selector}"/>-->
		</mx:State>
		<mx:State name="state4" basedOn="state3">
			<!--<mx:SetProperty target="{this.selector}"/>-->
		</mx:State>
		<mx:State name="state5" basedOn="state4">
			<!--<mx:SetProperty target="{this.selector}"/>-->
		</mx:State>
	</states>
	<transitions>
		<mx:Transition fromState="state0" toState="state5">
			<mx:Sequence>
				<mx:SetPropertyAction target="{this}" name="height"/>
				<mx:SetPropertyAction target="{this}" name="width" value="984"/>
				<mx:SetPropertyAction target="{this.selector}"  name="quickSizeImages" value="true"/>
				<mx:SetPropertyAction target="{this.title}"  name="xml" value="{this.txt}"/>
				<mx:SetPropertyAction target="{this.selector}"  name="xml" value="{this.img}"/>
				<mx:SetPropertyAction target="{this.title}"  name="alpha" value="0"/>
				<mx:Fade target="{this.title}" alphaFrom="0" alphaTo="1"/>
				<mx:SetPropertyAction target="{this.selector}"  name="sizeImages" value="true"/>
				<mx:SetPropertyAction target="{this.selector}"  name="loadImages" value="true"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state5" toState="state0">
			<mx:Sequence>
				<mx:SetPropertyAction target="{this.selector}"  name="loadImages" value="false"/>
				<mx:SetPropertyAction target="{this.selector}"  name="sizeImages" value="false"/>
				<mx:SetPropertyAction target="{this}" name="height" value="0"/>
				<mx:SetPropertyAction target="{this}" name="width" value="0"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state0" toState="state1">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
				<mx:Resize target="{this}" widthTo="250" heightTo="30" duration="500" easingFunction="{mx.effects.easing.Back.easeOut}"/>
				<mx:Resize target="{this}"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="*" toState="state2">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
				<mx:SetPropertyAction target="{this.title}"  name="xml" value="{this.txt}"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state2" toState="state3">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
				<mx:SetPropertyAction target="{this.title}"  name="alpha" value="0"/>
				<mx:SetPropertyAction target="{this.selector}"  name="xml" value="{this.img}"/>
				<mx:Fade target="{this.title}" alphaFrom="0" alphaTo="1"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state4" toState="state3">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
				<mx:Fade target="{this.title}" alphaFrom="1" alphaTo="0"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state3" toState="state4">
			<mx:Sequence>
				<mx:SetPropertyAction target="{this.selector}"  name="sizeImages" value="true"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state5" toState="state4">
			<mx:Sequence>
				<mx:SetPropertyAction target="{this.selector}"  name="quickSizeImages" value="false"/>
				<mx:SetPropertyAction target="{this.selector}"  name="sizeImages" value="false"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="*" toState="state5">
			<mx:Sequence effectEnd="{this.dispatchTransitionCompleted()}">
				<mx:SetPropertyAction target="{this.selector}"  name="loadImages" value="true"/>
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state2" toState="state1">
			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
			</mx:Sequence>
		</mx:Transition>
		<mx:Transition fromState="state1" toState="state0">
			<mx:Sequence effectEnd="{this.dispatchTransitionCompleted()}">
				<mx:Resize target="{this}" widthTo="250" heightTo="30" duration="500" easingFunction="{mx.effects.easing.Exponential.easeInOut}"/>
				<mx:Resize target="{this}"/>
			</mx:Sequence>
		</mx:Transition>
	</transitions>
</ModCanvas>

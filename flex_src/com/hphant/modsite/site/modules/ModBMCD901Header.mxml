<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns="com.hphant.modsite.site.modules.*" 
	       xmlns:mx="http://www.adobe.com/2006/mxml" 
	       visible="false"
	       mouseMove="{repositionToolTip()}"
	       updateComplete="{creationCompleted()}"
	       xmlns:text="com.hphant.modsite.site.assets.text.*" clipContent="false"
	       autoLayout="true" verticalScrollPolicy="off" horizontalScrollPolicy="off" implements="com.hphant.modsite.site.modules.interfaces.IModule" 
	       width="0" height="0" xmlns:menu="com.hphant.modsite.site.assets.menu.*" currentState="state0" xmlns:text1="flash.text.*">
	       <menu:MALinkBarSubmenu data="{selSub}" visible="false" y="{this.subY}" xml="{this.subXML}" styleName="headerSubMenu" creationComplete="{this.subMenu.addEventListener(MALinkClickEvent.LINK_CLICKED,this.menuCick)}" moveEffect="{this.subMove}" id="subMenu" x="15" width="{this.width-this.getStyle('cornerRadius')*2}"/>
	       <mx:Canvas mask="{bgImageMask}" id="bgImage" verticalScrollPolicy="off" horizontalScrollPolicy="off" width="100%" height="100%">
	       		<mx:Image toolTipShow="{repositionToolTip()}" x="1" y="1"  id="bgBase" source="@Embed(source='embeds/bmcdheaderbackground_base.png')" />
	       		<mx:Image toolTipShow="{repositionToolTip()}" x="1" y="-1" id="bgGlass" source="@Embed(source='embeds/bmcdheaderbackground_glass.png')" />
	       </mx:Canvas>
	       <mx:Canvas id="bgImageMask" styleName="headerMask"  width="{this.width-2}" height="{this.height-2}" x="1" y="1"/>
	       <mx:Canvas id="bgOutline"  x="0" y="0" width="{this.width}" height="{this.height}" borderColor="{this.ol_color}" borderThickness="1" backgroundAlpha="0" borderStyle="solid" cornerRadius="{corner}"/>
	       <mx:VBox width="100%" height="100%">
	       	
	       
	       <mx:HBox id="logoHolder" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" paddingTop="4" paddingLeft="4" paddingRight="8">
	       		<mx:Image complete="{log('BMCD Logo load complete: source=\''+bmcdLogo.source+'\'')}" ioError="{log('BMCD Logo load failed: source=\''+bmcdLogo.source+'\'')}" toolTipShow="{repositionToolTip()}" id="bmcdLogo" width="139" height="128" alpha="0" click="{this.logoClicked(event)}" autoLoad="true" buttonMode="true"/>
		       <mx:VBox width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" verticalGap="-5">
		       		<mx:HBox id="addressHolder" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
			       		<mx:VBox id="titleHolder" width="100%" paddingTop="5" verticalScrollPolicy="off" horizontalScrollPolicy="off" verticalGap="-8">
			       		<text:MAText id="title" styleName="headerTitle" width="100%" height="40" alpha="0" />
		       			<text:MAText paddingLeft="10" id="subtitle" styleName="headerSubTitle" width="100%" height="40" alpha="0" />
		       			</mx:VBox>
		       			<mx:VBox id="addressPhoneHolder" verticalScrollPolicy="off" horizontalScrollPolicy="off" verticalGap="-8"  alpha="0">
			       			<text:MAText id="phone" styleName="headerPhone" textAlign="right" width="300" insertBreaks="false" />
			       			<text:MAText id="address" styleName="headerAddress" textAlign="right" width="300" height="70" insertBreaks="false" />
		       			</mx:VBox>
		       		</mx:HBox>
	       			<mx:HBox id="menuHolder" width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off" verticalAlign="middle">
			       	   <menu:MAHeaderMenu addedEffect="{menuFade}" click="{this.menuCick(event)}" mouseOver="{this.menuMouseOver(event)}" id="mainMenu" verticalScrollPolicy="off" horizontalScrollPolicy="off" width="100%" >
			       	   	<menu:moveEffect>
			       	   		<mx:Move />
			       	   	</menu:moveEffect>
			       	   </menu:MAHeaderMenu>
				       <mx:Image complete="{log('Jag Logo load complete: source=\''+bmcdLogo.source+'\'')}" ioError="{log('Jag Logo load failed: source=\''+bmcdLogo.source+'\'')}" toolTipShow="{repositionToolTip()}" id="jagLogo" width="74" height="38" alpha="0" click="{this.logoClicked(event)}" autoLoad="true" buttonMode="true"/>
				       <mx:Image complete="{log('Land Rover Logo load complete: source=\''+bmcdLogo.source+'\'')}" ioError="{log('Land Rover Logo load failed: source=\''+bmcdLogo.source+'\'')}" toolTipShow="{repositionToolTip()}" id="lrLogo" width="73" height="38" alpha="0" click="{this.logoClicked(event)}" autoLoad="true" buttonMode="true"/>
				    </mx:HBox>
	       		</mx:VBox>
	       </mx:HBox>
	       
		   </mx:VBox>
	       <menu:MAVerticleSubMenu rollOut="{this.huvMenu.visible=false}"  visible="false" hideEffect="{this.huvFade}" showEffect="{this.huvFade}" x="144.6" y="102" creationComplete="{this.huvMenu.addEventListener(MALinkClickEvent.LINK_CLICKED,this.menuCick)}" id="huvMenu" width="50"/>
		   <mx:Move id="huvMove" target="{this.huvMenu}"/>
		   <mx:Move id="subMove"/>
		   <mx:Fade id="huvFade"/>
		   <mx:Fade id="menuFade"/>
	       
		   <mx:states>
		   		<mx:State name="state0">
		   			<mx:RemoveChild target="{title}"/>
		   			<mx:RemoveChild target="{subtitle}"/>
		   			<mx:RemoveChild target="{addressPhoneHolder}"/>
		   			<mx:RemoveChild target="{bmcdLogo}"/>
		   			<mx:RemoveChild target="{jagLogo}"/>
		   			<mx:RemoveChild target="{lrLogo}"/>
		   			<mx:RemoveChild target="{mainMenu}"/>
		   			<mx:RemoveChild target="{huvMenu}"/>
		   			<mx:RemoveChild target="{subMenu}"/>
		   			<mx:SetProperty target="{this}" name="visible" value="true"/>
		   		</mx:State>
		   		<mx:State name="state1" basedOn="state0">
		   			<mx:SetProperty target="{this}" name="height" value="140"/>
		   			<mx:SetProperty target="{this}" name="width" value="984"/>
		   		</mx:State>
		   		<mx:State name="state2" basedOn="state1">
		   			<mx:SetProperty target="{subMenu}" value="true" name="visible"/>
		   			<mx:AddChild target="{bmcdLogo}" relativeTo="{logoHolder}" position="firstChild"/>
		   			<mx:AddChild target="{mainMenu}" relativeTo="{menuHolder}" position="firstChild"/>
		   		</mx:State>
		   		<mx:State name="state3" basedOn="state2">
		   			<mx:AddChild target="{title}" relativeTo="{titleHolder}"/>
		   			<mx:AddChild target="{subtitle}" relativeTo="{titleHolder}"/>
		   			<mx:AddChild target="{addressPhoneHolder}" relativeTo="{addressHolder}" position="lastChild"/>
		   		</mx:State>
		   		<mx:State name="state4" basedOn="state3">
		   			<mx:AddChild target="{jagLogo}" relativeTo="{menuHolder}"/>
		   			<mx:AddChild target="{lrLogo}" relativeTo="{menuHolder}" position="lastChild"/>
		   			<mx:AddChild target="{huvMenu}"/>
		   			<mx:AddChild target="{subMenu}" position="firstChild"/>
		   			<!--<mx:SetProperty target="{subMenu}" name="y" value="80"/>-->
		   		</mx:State>
		   		</mx:states>
		   <mx:transitions>
		   		<mx:Transition fromState="*" toState="state1">
		   			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
		   				<mx:Resize target="{this}" widthTo="250" heightTo="30" duration="500" easingFunction="{mx.effects.easing.Back.easeOut}"/>
						<mx:Resize target="{this}"/>
		   			</mx:Sequence>
		   		</mx:Transition>
		   		<mx:Transition fromState="state1" toState="state2">
		   			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
		   				<mx:AddChildAction target="{bmcdLogo}"/>
		   				<mx:AddChildAction target="{jagLogo}"/>
		   				<mx:AddChildAction target="{lrLogo}"/>
		   				<mx:Parallel>
		   					<mx:Fade target="{bmcdLogo}" alphaFrom="0" alphaTo="1"/>
		   					<mx:Fade target="{jagLogo}" alphaFrom="0" alphaTo="1"/>
		   					<mx:Fade target="{lrLogo}" alphaFrom="0" alphaTo="1"/>
		   				</mx:Parallel>
		   			</mx:Sequence>
		   		</mx:Transition>
		   		<mx:Transition fromState="state2" toState="state3">
		   			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
		   				<mx:AddChildAction target="{title}"/>
		   				<mx:AddChildAction target="{subtitle}"/>
		   				<mx:AddChildAction target="{addressPhoneHolder}"/>
		   				<mx:Parallel>
		   					<mx:Fade target="{title}" alphaFrom="0" alphaTo="1"/>
		   					<mx:Fade target="{subtitle}" alphaFrom="0" alphaTo="1"/>
		   					<mx:Fade target="{addressPhoneHolder}" alphaFrom="0" alphaTo="1"/>
		   				</mx:Parallel>
		   			</mx:Sequence>
		   		</mx:Transition>
		   		<mx:Transition fromState="state3" toState="state4">
		   			<mx:Sequence effectEnd="{this.dispatchTransitionCompleted()}">
		   				<mx:AddChildAction target="{mainMenu}"/>
		   				<mx:AddChildAction target="{huvMenu}"/>
		   				<mx:AddChildAction target="{subMenu}"/>
		   				<mx:SetPropertyAction target="{subMenu}"/>
		   				<mx:Pause duration="500" suspendBackgroundProcessing="false"/>
		   			</mx:Sequence>
		   		</mx:Transition>
		   		<mx:Transition fromState="state4" toState="state3">
		   			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
		   				<mx:RemoveChildAction target="{mainMenu}"/>
		   				<mx:RemoveChildAction target="{huvMenu}"/>
		   				<mx:RemoveChildAction target="{subMenu}"/>
		   				<mx:SetPropertyAction target="{subMenu}"/>
		   			</mx:Sequence>
		   		</mx:Transition>
		   		<mx:Transition fromState="state3" toState="state2">
		   			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
		   				<mx:Parallel>
		   					<mx:Fade target="{title}" alphaFrom="1" alphaTo="0"/>
		   					<mx:Fade target="{subtitle}" alphaFrom="1" alphaTo="0"/>
		   					<mx:Fade target="{addressPhoneHolder}" alphaFrom="1" alphaTo="0"/>
		   				</mx:Parallel>
		   				<mx:RemoveChildAction target="{title}"/>
		   				<mx:RemoveChildAction target="{subtitle}"/>
		   				<mx:RemoveChildAction target="{addressPhoneHolder}"/>
		   			</mx:Sequence>
		   		</mx:Transition>
		   		<mx:Transition fromState="state2" toState="state1">
		   			<mx:Sequence effectEnd="{this.dispatchStateReached()}">
		   				<mx:Parallel>
		   					<mx:Fade target="{bmcdLogo}" alphaFrom="1" alphaTo="0"/>
		   					<mx:Fade target="{jagLogo}" alphaFrom="1" alphaTo="0"/>
		   					<mx:Fade target="{lrLogo}" alphaFrom="1" alphaTo="0"/>
		   				</mx:Parallel>
		   				<mx:RemoveChildAction target="{bmcdLogo}"/>
		   				<mx:RemoveChildAction target="{jagLogo}"/>
		   				<mx:RemoveChildAction target="{lrLogo}"/>
		   			</mx:Sequence>
		   		</mx:Transition>
		   		<mx:Transition fromState="state1" toState="state0">
		   			<mx:Sequence effectEnd="{this.dispatchTransitionCompleted()}">
		   				<mx:Resize target="{this}" widthTo="250" heightTo="30" duration="500" easingFunction="{mx.effects.easing.Back.easeOut}"/>
						<mx:Resize target="{this}"/>
		   			</mx:Sequence>
		   		</mx:Transition>
		   </mx:transitions>
	<mx:Script>
		<![CDATA[
			import mx.utils.URLUtil;
			import mx.core.Application;
			import com.hphant.utils.XMLUtility;
			import mx.managers.ToolTipManager;
			import mx.core.IToolTip;
			import mx.effects.easing.Back;
			import mx.controls.Button;
			import com.hphant.modsite.site.events.MALinkClickEvent;
			import com.hphant.modsite.site.style.CSSInstance;
		    include "interfaces/ModuleIncludes.as";
			import mx.core.UIComponent;
			
			private function repositionToolTip():void{
				var p:Point = new Point(this.mouseX,this.mouseY);
				p = this.localToGlobal(p);
				var tt:IToolTip = ToolTipManager.currentToolTip;
				if(tt){
					tt.x = p.x;
					tt.y = p.y - tt.height;
				}
			}
			
			private function creationCompleted():void{
				var cr:Number = this.getStyle('cornerRadius');
				this.subMenu.width = this.width-cr*2;
				this.subMenu.x = cr;
				corner = cr;
				ol_thisckness = this.getStyle('borderThickness')
				ol_color = this.getStyle('borderColor')
			}
			[Bindable]
			private var subY:Number = 1;
			[Bindable]
			private var selSub:XML;
			[Bindable]
			private var subXML:XMLList;
			[Bindable]
			private var ol_color:uint = 0x000000;
			[Bindable]
			private var ol_thisckness:Number = 1;
			[Bindable]
			private var corner:Number = 0;
			/* protected override function styleChanged
				ol_color = this.getStyle('backgroundColor');
				ol_thisckness = this.getStyle('borderThickness');
			} */
		    protected override function commitProperties():void{
				if(this.xmlChanged){
					this.mainMenu.xml = this._xml.ul.(attribute("class")=="MAHeaderMenu");
					var selectedFound:Boolean = false;
					try{
						 for each(var liNode:XML in this.mainMenu.xml.li){
							//if(liNode.@selected=="selected"){
							if(this.uriManager.current.indexOf(String(liNode.a.@href).replace("http://"+URLUtil.getServerName(Application.application.url),""))==0){
								for each(var subli:XML in liNode.ul.li){
									if(this.uriManager.current.indexOf(String(subli.a.@href).replace("http://"+URLUtil.getServerName(Application.application.url),""))==0){
										selSub = subli;
										if(subMenu){
											subMenu.data = subli;
										}
									}
								}
								subXML = liNode.ul;
								selectedFound = true;
							}
						} 
					} catch (e:Error){
						log("Unable to locate a selected section");
					}
					if(!selectedFound){
						subXML = null;
					}
					if(subXML && subXML.length()>0){
						subY = 70;
					} else {
						subY = 1;
					}
					
					XMLUtility.insertBlankNode(this._xml.h1);
					XMLUtility.insertBlankNode(this._xml.h2);
					XMLUtility.insertBlankNode(this._xml.h3);
					this.title.xml = this._xml.h1.(attribute("class")=="Title");
					this.subtitle.xml = this._xml.h2.(attribute("class")=="SubTitle");
					this.phone.xml = this._xml.h2.(attribute("class")=="Address");
					this.address.xml = this._xml.h3.(attribute("class")=="Address");
					this.loadBMCDlogo();
					this.loadJagLogo();
					this.loadLandroverLogo();
					this.xmlChanged = false;
				}
				super.commitProperties();
			}
			private function loadBMCDlogo():void{
				var b:XMLList = this._xml.div.(attribute("class")=="BMCDLogo").a;
				
				if(b.length()==0){
					b = this._xml.div.(attribute("class")=="BMCDLogo");
				}
				XMLUtility.insertBlankNode(b.img);
				if(b.length()>0 && String(this.bmcdLogo.source) != String(b.img.@src)){
					this.bmcdLogo.data = b;
					log("Loading BMCD Logo: html='"+b.toXMLString()+"'");
					this.bmcdLogo.source = String(b.img.@src);
					this.bmcdLogo.toolTip = b.img.@title;
				}
			}
			private function loadJagLogo():void{
				var b:XMLList = this._xml.div.(attribute("class")=="JaguarLogo").a;
				if(b.length()==0){
					b = this._xml.div.(attribute("class")=="JaguarLogo");
				}
				XMLUtility.insertBlankNode(b.img);
				if(b.length()>0 && this.jagLogo.source != b.img.@src){
					this.jagLogo.data = b;
					log("Loading Jag Logo: html='"+b.toXMLString()+"'");
					this.jagLogo.source = b.img.@src;
					this.jagLogo.toolTip = b.img.@title;
				}
				
			}
			private function loadLandroverLogo():void{
				var b:XMLList = this._xml.div.(attribute("class")=="LandRoverLogo").a;
				if(b.length()==0){
					b = this._xml.div.(attribute("class")=="LandRoverLogo");
				}
				XMLUtility.insertBlankNode(b.img);
				if(b.length()>0 && this.lrLogo.source != b.img.@src){
					this.lrLogo.data = b;
					log("Loading Land Rover Logo: html='"+b.toXMLString()+"'");
					this.lrLogo.source = b.img.@src;
					this.lrLogo.toolTip = b.img.@title;
				}
				
			}
		    private function menuMouseOver(e:MouseEvent):void{
		    	if(e.target is Button){
		    		this.huvMenu.xml = XMLList(e.target.data.ul);
		    		var p:Point = Button(e.target).contentToGlobal(new Point(Button(e.target).width/2,Button(e.target).height));//this.mainMenu.contentToGlobal(new Point(Button(e.target).x+Button(e.target).width/2,Button(e.target).y+Button(e.target).height+5));
		    		var p2:Point = this.localToGlobal(new Point(this.x,this.y));
		    		var doResume:Boolean = false;
		    		if(this.huvMenu.xml.length()>0){
		    			this.huvMenu.visible = true;
			    		if(!this.huvMove.isPlaying){
			    			this.huvMove.pause();
			    		}
			    		//this.huvMove.end()
			  			//this.huvMove.startDelay = 200;
			    		//this.huvMove.xFrom = this.huvMenu.x;
			    		//this.huvMove.yFrom = this.huvMenu.y;
			    		this.huvMove.xTo = p.x-p2.x;
			    		this.huvMove.yTo = p.y-p2.y+5;
			    		this.huvMove.play();
		    		} else {
		    			this.huvMenu.visible = false;
		    		}
		    		
		    	}
		    	
		    }
		    private function menuCick(e:Event):void{
		    	this.huvMenu.visible=false;
		    	if(e is MALinkClickEvent){
		    		this.uriManager.goToURI(MALinkClickEvent(e).item.a.@href)
		    	} else if(e is MouseEvent){
			    	if(e.target.data){
				    	if(e.target is Button || e.target==this.subMenu){
				    		this.uriManager.goToURI(e.target.data.a.@href)
				    	}
			    	}
		    	}
		    	
		    }
		    private function logoClicked(e:MouseEvent):void{
		    	if(e.currentTarget.data && e.currentTarget.data.@href){
		    		this.uriManager.goToURI(e.currentTarget.data.@href)
		    	}
		    }
		    public function duplicate():IModule{
				var m:ModBMCD901Header = new ModBMCD901Header();
				m.xml = this.xml;
				m.currentState = this.currentState;
			m.height = this.height;
			m.width = this.width;
				m.validateNow();
				return m;
			}
		]]>
	</mx:Script>
	
</mx:Canvas>

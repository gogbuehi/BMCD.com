<?xml version="1.0"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" verticalGap="0" minWidth="220" minHeight="200" width="325" height="300"
	 verticalScrollPolicy="off" horizontalScrollPolicy="off" xmlns:text="com.hphant.components.text.*" creationComplete="{init()}" xmlns:ui="flash.ui.*" xmlns:context="com.hphant.context.*">

	<mx:Metadata>

		[Event(name="change", type="flash.events.Event")]
		[Event(name="link", type="flash.events.TextEvent")]
		[DefaultTriggerEvent("change")]
		
		/**
		 *  Name of the CSS Style declaration to use for the styles for the TextArea.
		 *  By default, the TextArea uses the RichTextEditor control's inheritable styles.
		 */
		[Style(name="textAreaStyleName", type="String", inherit="no")]
		
		[IconFile("RichTextEditor.png")]
		
		[Exclude(name="linksMenuArray", kind="property")]
		[Exclude(name="alignButtons", kind="property")]
		[Exclude(name="boldButton", kind="property")]
		[Exclude(name="bulletButton", kind="property")]
		[Exclude(name="colorPicker", kind="property")]
		[Exclude(name="defaultButton", kind="property")]
		[Exclude(name="fontFamilyArray", kind="property")]
		[Exclude(name="fontFamilyCombo", kind="property")]
		[Exclude(name="fontSizeArray", kind="property")]
		[Exclude(name="fontSizeCombo", kind="property")]
		[Exclude(name="icon", kind="property")]
		[Exclude(name="italicButton", kind="property")]
		[Exclude(name="layout", kind="property")]
		[Exclude(name="linkTextInput", kind="property")]
		[Exclude(name="toolBar", kind="property")]
		[Exclude(name="toolBar2", kind="property")]
		[Exclude(name="underlineButton", kind="property")]

	</mx:Metadata>

	<mx:Array id="fontFamilyArray"> 
		<mx:String>_sans</mx:String>
		<mx:String>_serif</mx:String>
		<mx:String>_typewriter</mx:String>
		<mx:String>Arial</mx:String>
		<mx:String>Courier</mx:String>
		<mx:String>Courier New</mx:String>
		<mx:String>Geneva</mx:String>
		<mx:String>Georgia</mx:String>
		<mx:String>Helvetica</mx:String>
		<mx:String>Times New Roman</mx:String>
		<mx:String>Times</mx:String>
		<mx:String>Verdana</mx:String>
	</mx:Array>

	<mx:Array id="fontSizeArray"> 
		<mx:String>8</mx:String>
		<mx:String>9</mx:String>
		<mx:String>10</mx:String>
		<mx:String>11</mx:String>
		<mx:String>12</mx:String>
		<mx:String>14</mx:String>
		<mx:String>16</mx:String>
		<mx:String>18</mx:String>
		<mx:String>20</mx:String>
		<mx:String>22</mx:String>
		<mx:String>24</mx:String>
		<mx:String>26</mx:String>
		<mx:String>28</mx:String>
		<mx:String>36</mx:String>
		<mx:String>48</mx:String>
		<mx:String>72</mx:String>
	</mx:Array>

	<mx:Script>
	<![CDATA[
	
    
    import mx.controls.textClasses.TextRange;
    import mx.core.mx_internal;
    import mx.core.IUITextField;
    import mx.core.UITextFormat;
    import mx.controls.ComboBox;

    use namespace mx_internal;
    
    public var fontFamilyToolTip:String = "Font Family";
    public var fontSizeToolTip:String = "Font Size";
    public var boldToolTip:String = "Bold";
    public var italicToolTip:String = "Italic";
    public var underlineToolTip:String = "Underline";
    public var colorPickerToolTip:String = "Color";
    public var alignToolTip:String = "Align";
    public var bulletToolTip:String = "Bullet";
    public var linkToolTip:String = "Link";

    private var linkTextCommitted:Boolean = false;
    private var showControlBarChanged:Boolean = false;
    private var showToolTipsChanged:Boolean = false;
    private var textChanged:Boolean = false;
    private var htmlTextChanged:Boolean = false;
    private var previousTextFormat:TextFormat = null;
    private var textFormatChanged:Boolean = false;
    // -1 is used to force updation of the ToolBar styles
    private var lastCaretIndex:int = -1;
    private var invalidateToolBarFlag:Boolean = false;
    private var firstTime:Boolean = true;
    
    private function init():void
    {
        update();
        this.addEventListener(Event.CHANGE, this.onChange);
        
        this.cmiHide = new ContextMenuItem("Hide Formatting Tools");
        this.cmiShow = new ContextMenuItem("Show Formatting Tools");
        this.cmiHide.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,this.hideFormattingControlls);
        this.cmiShow.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,this.showFormattindControlls);
        
        this.cmArrary = [this.cmiHide,this.cmiShow];
    }
    private function onChange(event:Event):void {
         update();
    }

    private function update():void {
        xhtmlText = richTextEditorToHtml( this.htmlText );
    }

    /*
    public function RichTextEditor()
    {
        super();
    }
    */
    
    //--------------------------------------------------------------------------
    //
    //  Properties
    //
    //--------------------------------------------------------------------------

    //----------------------------------
    //  defaultLinkProtocol
    //----------------------------------

    private var _defaultLinkProtocol:String = "http://";

    [Inspectable(defaultValue="http://")]
    
    public function get defaultLinkProtocol():String
    {
        return _defaultLinkProtocol;
    }

    public function set defaultLinkProtocol(value:String):void
    {
        _defaultLinkProtocol = value;
        
         if (linkTextInput)
            linkTextInput.text = _defaultLinkProtocol; 
    }

    //----------------------------------
    //  showControlBar
    //----------------------------------

    private var _showControlBar:Boolean = true;

    [Inspectable(category="General", defaultValue="true")]
    
    public function get showControlBar():Boolean
    {
        return _showControlBar;
    }

    public function set showControlBar(value:Boolean):void
    {
        _showControlBar = value;
        showControlBarChanged = true;
        invalidateProperties();
    }

    //----------------------------------
    //  showToolTips
    //----------------------------------

    private var _showToolTips:Boolean = false;

    [Inspectable(defaultValue="false")]
    
    public function get showToolTips():Boolean
    {
        return _showToolTips;
    }

    public function set showToolTips(value:Boolean):void
    {
        _showToolTips = value;
        showToolTipsChanged = true;
        invalidateProperties();
    }

    //----------------------------------
    //  selection
    //----------------------------------

    /**
     *  The selected text.
     */
    public function get selection():TextRange
    {
        return new TextRange(this, true);
    }

    //----------------------------------
    //  text
    //----------------------------------

    private var _text:String = "";

    [Bindable("valueCommit")]
    [CollapseWhiteSpace]
    [NonCommittingChangeEvent("change")]
    [Inspectable(category="General")]

    public function get text():String
    {
        return textArea ? textArea.text : _text;
    }

    public function set text(value:String):void
    {
        _text = value;
        textChanged = true;
        invalidateProperties();
    }

    //----------------------------------
    //  htmlText
    //----------------------------------

    private var _htmlText:String = "";

    [Bindable("valueCommit")]
    [CollapseWhiteSpace]
    [NonCommittingChangeEvent("change")]
    [Inspectable(category="General")]

	public function get htmlText():String
	{
		
		_htmlText = textArea ? textArea.htmlText : _htmlText;
		if(!this.colorEnabled || !isUsingColor){
			var pattern:RegExp = /COLOR=\"(.*?)\"/gi;
        	_htmlText = _htmlText.replace(pattern, "");
  		}
		return _htmlText.split('href="event:').join('href="');
	}

    public function set htmlText(value:String):void
	{
		_htmlText = value.split('href="event:').join('href="').split('href="').join('href="event:');
		htmlTextChanged = true;
		invalidateProperties();
	}
    
    /**
     * xhtmlText is done whenever a change happens to the editor
     * this is setup the init() function that is called by creationComplete
     **/
    private var _xhtmlText:String;
    
    [Bindable]
    public function get xhtmlText():String
    {
        return _xhtmlText;
    }
    
    public function set xhtmlText(value:String):void
    {
        _xhtmlText = value;
    }
        


    //--------------------------------------------------------------------------
    //
    //  Overridden methods
    //
    //--------------------------------------------------------------------------

    override protected function commitProperties():void
    {
        super.commitProperties();

        if (firstTime)
        {
            firstTime = false;
            var textAreaStyleName:String = getStyle(
                                "textAreaStyleName");
            if (textAreaStyleName)
                textArea.styleName = textAreaStyleName;
            textArea.getTextField().alwaysShowSelection = true;
        }
        
        if (showControlBarChanged)
        {
            if (_showControlBar)
            {
                //controlBar.height = NaN;
                //controlBar.visible = true;
            }
            else
            {
                //controlBar.height = 0;
                //controlBar.visible = false;
            }
            showControlBarChanged = false;
        }
                    
        if (showToolTipsChanged)
        {
            if (_showToolTips)
            {
                fontFamilyCombo.toolTip = fontFamilyToolTip;
                fontSizeCombo.toolTip = fontSizeToolTip;
                boldButton.toolTip = boldToolTip;
                italicButton.toolTip = italicToolTip;
                underlineButton.toolTip = underlineToolTip;
                colorPicker.toolTip = colorPickerToolTip;
                alignButtons.toolTip = alignToolTip;
                bulletButton.toolTip = bulletToolTip;
                linkTextInput.toolTip = linkToolTip;
            }
            else
            {
                fontFamilyCombo.toolTip = "";
                fontSizeCombo.toolTip = "";
                boldButton.toolTip = "";
                italicButton.toolTip = "";
                underlineButton.toolTip = "";
                colorPicker.toolTip = "";
                alignButtons.toolTip = "";
                bulletButton.toolTip = "";
                linkTextInput.toolTip = "";
            }    
            showToolTipsChanged = false;
        }
        
        if (textChanged || htmlTextChanged)
        {
            // Revert previously set TextFormat.
            var tf:UITextFormat = IUITextField(textArea.getTextField()).getUITextFormat();
            // bullet style is not exposed in flex
            // hence has to be explicitly defaulted.
            tf.bullet = false;
            textArea.getTextField().defaultTextFormat = tf;
            if (textChanged)
            {
                if (_text !== null)
                    textArea.text = _text;
                textChanged = false;
            }
            else
            {
                if (_htmlText !== null)
                    textArea.htmlText = _htmlText;
                htmlTextChanged = false;
            }
        }
    }
    
    override protected function measure():void
    {
        // Called only when explicitWidth and
        // explicitHeight are set to NaN, since
        // we have set width and height explicitly
        // for RTE's panel.
        super.measure();
        measuredMinWidth = 220;
        measuredWidth = 320;
        measuredMinHeight = 200;
        measuredHeight = 300;
    }

    /**
     *  @private
     */
    override public function styleChanged(styleProp:String):void
    {
        super.styleChanged(styleProp);

        if (styleProp == null || styleProp == "textAreaStyleName")
        {
            if (textArea)
            {
                var textAreaStyleName:String = getStyle("textAreaStyleName");
                textArea.styleName = textAreaStyleName;
            }
        }
        
        if (!invalidateToolBarFlag)
        {
            invalidateToolBarFlag = true;
            callLater(getTextStyles);
        }
    }

    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    protected function cleanATag(str:String):String
    {
        var pattern:RegExp;
        var str:String;
        
         pattern = /<A HREF/gi;
        str = str.replace(pattern, "<a href");
        pattern = /<\/A>/gi;
        str = str.replace(pattern, "<\/a>");
        pattern= /TARGET="_blank"/gi;
        str = str.replace(pattern, "rel=\"external\" ");   
        
        return str;
    }
    public function cleanHTML(str:String):String
    {
        var pattern:RegExp;
        var str:String;

        pattern = /COLOR=\"(.*?)\"/gi;
        str = str.replace(pattern, "color:$1;");
        pattern = /SIZE=\"(.*?)\"/gi;
        str = str.replace(pattern, "font-size:$1px;");
        pattern = /FACE=\"(.*?)\"/gi;
        str = str.replace(pattern, "font-family:$1;");
        pattern = /ALIGN=\"(.*?)\"/gi;
        str = str.replace(pattern, "text-align:$1;");
        
        //format <font> tag
        pattern = /<FONT STYLE/gi;
        str = str.replace(pattern, "<font style");
        pattern = /<\/FONT.*?>/gi;
        str = str.replace(pattern, "<\/font>");
        
        //format <p> tag
        pattern = /<P STYLE/gi;
        str = str.replace(pattern, "<p style");
        pattern = /<\/P>/gi;
        str = str.replace(pattern, "<\/p>");
        
        //format <li> tag
        pattern= /<LI>/gi;
        str = str.replace(pattern, "<li>");
        pattern= /<\/LI>/gi;
        str = str.replace(pattern, "</li>");
        
        //format <ul> tag
        pattern= /<UL>/gi;
        str = str.replace(pattern, "<ul>");
        pattern= /<\/UL>/gi;
        str = str.replace(pattern, "</ul>");

   


        //format alignment in styles tag
        pattern = /text-align: RIGHT/gi;
        str = str.replace(pattern, "text-align:right");
        pattern = /text-align: LEFT/gi;
        str = str.replace(pattern, "text-align:left");
        pattern = /text-align: CENTER/gi;
        str = str.replace(pattern, "text-align:center");
        pattern = /text-align: JUSTIFY/gi;
        str = str.replace(pattern, "text-align:justify");
        
        //format <a> tag
        
        //created a seperate function that way i can override it, and
        //put in my own stuff in the class that is extending it.
        //i could do this with all of the tags, but for now all i need is the 
        //a href tag.
        str = cleanATag(str);
        
        pattern = /<I>/gi;
        str = str.replace(pattern, "<em>");
        pattern = /<\/I>/gi;
        str = str.replace(pattern, "</em>");
        pattern = /<B>/gi;
        str = str.replace(pattern, "<strong>");
        pattern = /<\/B>/gi;
        str = str.replace(pattern, "</strong>");
        pattern = /<U>/gi;
        str = str.replace(pattern, "<u>");
        pattern = /<\/U>/gi;
        str = str.replace(pattern, "</u>");
        
        //this is to fix a bug
        //for some reason there is a u tag showing up? wtf
        pattern = /<U\/>/gi;
        str = str.replace(pattern, "");
        
        return str;
    }
    
    public function richTextEditorToHtml(str:String):String 
    {
        // Create XML document
        var xml:XML = XML("<BODY>"+str+"</BODY>");

        // temporary
        var t1:XML;
        var t2:XML;
        
        // Remove all TEXTFORMAT
        for( t1 = xml..TEXTFORMAT[0]; t1 != null; t1 = xml..TEXTFORMAT[0] ) {
            t1.parent().replace( t1.childIndex(), t1.children() );
        }
        
        // Find all ALIGN
        for each ( t1 in xml..@ALIGN ) {
            t2 = t1.parent();
            t2.@STYLE = "text-align: " + t1 + "; " + t2.@STYLE;
            delete t2.@ALIGN;
        }
         
        // Find all FACE
        for each ( t1 in xml..@FACE ) {
            t2 = t1.parent();
            t2.@STYLE = "font-family: " + t1 + "; " + t2.@STYLE;
            delete t2.@FACE;
        }
        
        // Find all SIZE 
        for each ( t1 in xml..@SIZE ) {
            t2 = t1.parent();
            t2.@STYLE = "font-size: " + t1 + "px; " + t2.@STYLE;
            delete t2.@SIZE;
        }

        // Find all COLOR 
        for each ( t1 in xml..@COLOR ) {
            t2 = t1.parent();
            t2.@STYLE = "color: " + t1 + "; " + t2.@STYLE;
            delete t2.@COLOR;
        }
        
        // Find all LETTERSPACING 
        for each ( t1 in xml..@LETTERSPACING ) {
            t2 = t1.parent();
            t2.@STYLE = "letter-spacing: " + t1 + "px; " + t2.@STYLE;
            delete t2.@LETTERSPACING;
        }
        
        // Find all KERNING
        for each ( t1 in xml..@KERNING ) {
            t2 = t1.parent();
            // ? css 
            delete t2.@KERNING;
        }
        

        return cleanHTML(xml.children().toXMLString());
    }    

    


    public function setTextStyles(type:String, value:Object = null, tf:TextFormat = null):void
    {
        if(tf == null)
            var tf:TextFormat;

        var beginIndex:int = textArea.getTextField().selectionBeginIndex;
        var endIndex:int = textArea.getTextField().selectionEndIndex;

        if (beginIndex == endIndex)
        {
            tf = previousTextFormat;
        }
        else
        {
            if(tf == null){tf = new TextFormat();}
        }    
        
        if (type == "bold" || type == "italic" || type == "underline")
        {
        	trace("Setting "+type+" to "+value);
            tf[type] = value;
        }
        else if (type == "align" || type == "bullet")
        {
            if (beginIndex == endIndex)
            {
                tf = new TextFormat();
            }

            // Apply the paragraph styles to the whole paragraph instead of just 
            // the selected text
            beginIndex = textArea.getTextField().getFirstCharInParagraph(beginIndex) - 1;
            beginIndex = Math.max(0, beginIndex);
            endIndex = textArea.getTextField().getFirstCharInParagraph(endIndex) +
                textArea.getTextField().getParagraphLength(endIndex) - 1;
            tf[type] = value;
            previousTextFormat[type] = value;
            if (!endIndex)
                textArea.getTextField().defaultTextFormat = tf;
        }
        else if (type == "font")
        {
            tf[type] = fontFamilyCombo.text;
        }
        else if (type == "size")
        {
            var fontSize:uint = uint(fontSizeCombo.text);
            if (fontSize > 0)
                tf[type] = fontSize;
        }
        else if (type == "color")
        {
        	if(this.colorEnabled){
            	tf[type] = uint(colorPicker.selectedColor);
	         } else {
	         	delete tf[type];
	         }
        }
        else if (type == "url")
        {
            if (value != defaultLinkProtocol && value != "")
            {
                tf[type] = value;
                tf["target"] = "_blank";
            }
            else if (tf[type] != "")
            {
                tf[type] = ""; 
                tf["target"] = ""; 
            }
        }

        textFormatChanged = true;
                
        if (beginIndex == endIndex)
        {
            previousTextFormat = tf;
        }
        else
        {
            textArea.getTextField().setTextFormat(tf,beginIndex,endIndex);
        }

        
        var caretIndex:int = textArea.getTextField().caretIndex;
        var lineIndex:int =    textArea.getTextField().getLineIndexOfChar(caretIndex);

        textArea.invalidateDisplayList();
        textArea.validateDisplayList();
        // Scroll to make the line containing the caret under viewable area
        while (lineIndex >= textArea.getTextField().bottomScrollV)
        {
            textArea.verticalScrollPosition++;
        }
		getTextStyles();
        dispatchEvent(new Event("change"));
        callLater(textArea.setFocus);
    }

    protected function getTextStyles():void
    {
        if (!textArea)
            return;
            
        var tf:TextFormat;

        var beginIndex:int = textArea.getTextField().selectionBeginIndex;
        var endIndex:int = textArea.getTextField().selectionEndIndex;

        if (beginIndex == endIndex)
            linkTextInput.enabled = false;
        else
            linkTextInput.enabled = true;    
            
        if (textFormatChanged)
            previousTextFormat = null;

        if (beginIndex == endIndex)
        {
            tf = textArea.getTextField().defaultTextFormat;
            if (tf.url != "")
            {
                var carIndex:int = textArea.getTextField().caretIndex;
                if (carIndex < textArea.getTextField().length)
                {
                    var tfNext:TextFormat=textArea.getTextField().getTextFormat(carIndex, carIndex + 1);
                    if (!tfNext.url || tfNext.url == "")
                        tf.url = tf.target = "";
                }
                else
                    tf.url = tf.target = ""; 
            }
        }
        else
            tf = textArea.getTextField().getTextFormat(beginIndex,endIndex);

        if (!previousTextFormat || previousTextFormat.font != tf.font)
            setComboSelection(fontFamilyCombo, tf.font ? tf.font : "");
        if (!previousTextFormat || previousTextFormat.size != tf.size)
            setComboSelection(fontSizeCombo, tf.size ? String(tf.size) : "");
        if (!previousTextFormat || previousTextFormat.color != tf.color)
            colorPicker.selectedColor = Number(tf.color);
        
        if (!previousTextFormat || previousTextFormat.bold != tf.bold)
            boldButton.selected = boldSelected = tf.bold;
        if (!previousTextFormat || previousTextFormat.italic != tf.italic)
            italicButton.selected = italicSelected = tf.italic;
        if (!previousTextFormat || previousTextFormat.underline != tf.underline)
            underlineButton.selected = underlineSelected = tf.underline;

        if (!previousTextFormat || previousTextFormat.align != tf.align)
        {
            if (tf.align == "left")
                alignButtons.selectedIndex = 0;
            else if (tf.align == "center")
                alignButtons.selectedIndex = 1;
            else if (tf.align == "right")
                alignButtons.selectedIndex = 2;
            else if (tf.align == "justify")
                alignButtons.selectedIndex = 3;
        }
        if (!previousTextFormat || previousTextFormat.bullet != tf.bullet)
            bulletButton.selected = tf.bullet;
        if (!previousTextFormat || previousTextFormat.url != tf.url)
            linkTextInput.text = (tf.url == "" || tf.url == null) ? this.defaultLinkProtocol : tf.url;
        
        if (textArea.getTextField().defaultTextFormat != tf)
            textArea.getTextField().defaultTextFormat = tf;
        previousTextFormat = tf;
        textFormatChanged = false;
        
        lastCaretIndex = textArea.getTextField().caretIndex;
        invalidateToolBarFlag = false;

		_htmlText = textArea.htmlText;
    }

    private function setComboSelection(combo:ComboBox,val:String):void
    {
        var length:uint = combo.dataProvider.length;
        
        for (var i:uint = 0; i < length; i++)
        {
            if (combo.dataProvider.getItemAt(i).toLowerCase() == val.toLowerCase())
            {
                combo.selectedIndex = i;
                return;
            }
        }
        combo.selectedIndex = -1;
        combo.validateNow();
        combo.text = val;
    }

    /**
     *  @private
     *  This method is called when the user clicks on the textArea, drags
     *  out of it and releases the mouse button outside the TextArea.
     */
    private function systemManager_mouseUpHandler(event:MouseEvent):void
    {
        if (lastCaretIndex != textArea.getTextField().caretIndex)
            getTextStyles();
        else
        {
            if (textArea.getTextField().selectionBeginIndex == textArea.getTextField().selectionEndIndex)
                linkTextInput.enabled = false;
            else
                linkTextInput.enabled = true;    
        }
        systemManager.removeEventListener(
            MouseEvent.MOUSE_UP, systemManager_mouseUpHandler, true);        
    }
    
    [Bindable]
    private var boldSelected:Boolean = false;
    [Bindable]
    private var italicSelected:Boolean = false;
    [Bindable]
    private var underlineSelected:Boolean = false;
    
    private function hideFormattingControlls(event:Event = null):void{
    	_fcHeight = 0;
    }
    private function showFormattindControlls(event:Event = null):void{
    	_fcHeight = NaN;
    }
    [Bindable]
    [Inspectable]
    public function set displayTools(value:Boolean):void{
    	_displayTools = value;
    	(value) ? showFormattindControlls() : hideFormattingControlls();
    }
    public function get displayTools():Boolean{
    	return this._displayTools;
    }
    [Bindable]
    private var _displayTools:Boolean = true;
    [Bindable]
    private var _fcHeight:Number = NaN;
    
    [Bindable]
    private var cmArrary:Array = [];
    
    private var cmiHide:ContextMenuItem;
    private var cmiShow:ContextMenuItem;
    [Bindable]
    [Inspectable]
    public var isUsingColor:Boolean = true;
    [Bindable]
    [Inspectable]
    public var colorEnabled:Boolean = true;
    	
	]]>
	</mx:Script>
	<mx:Binding source="displayTools" destination="cmiHide.enabled"/>
	<mx:Binding source="useColor.selected" destination="isUsingColor"/>
	<mx:Binding source="!displayTools" destination="cmiShow.enabled"/>
	<text:BaseTextArea  backgroundAlpha="1" selectable="true" id="textArea" height="100%" width="100%" minHeight="0" minWidth="0"
				 change="dispatchEvent(event);"
				 valueCommit="dispatchEvent(event);"
				 keyUp="getTextStyles()"
				 keyDown="if (textFormatChanged) 
				 	{
				 		textArea.getTextField().defaultTextFormat=previousTextFormat;
				 		textFormatChanged = false;
				 	}"
				 mouseDown="systemManager.addEventListener(
					MouseEvent.MOUSE_UP, systemManager_mouseUpHandler, true);"
				 >
		<text:contextMenu>
			<ui:ContextMenu customItems="{this.cmArrary}">
			</ui:ContextMenu>
		</text:contextMenu>
	</text:BaseTextArea>
	<mx:HRule width="100%" buttonMode="true" useHandCursor="true" click="{displayTools = !displayTools}" toolTip="{displayTools?'Hide Tools':'DisplayTools'}"/>
	<mx:ControlBar width="100%" height="{_fcHeight}" paddingLeft="0" verticalGap="0" id="formattingControlls"> 
		
		<mx:ToolBar id="toolbar" width="100%" horizontalGap="7">
			
			<mx:ComboBox id="fontFamilyCombo" editable="true"
				creationComplete="getTextStyles();lastCaretIndex = -1;"
				dataProvider = "{fontFamilyArray}"
				close="setTextStyles('font');"
				enter="setTextStyles('font');"/>

			<mx:ComboBox id="fontSizeCombo" editable="true"
				paddingLeft="2" paddingRight="2"
				dataProvider = "{fontSizeArray}"
				close="setTextStyles('size');"
				enter="setTextStyles('size');"/>
					 
			<mx:HBox id="toolBar2" horizontalGap="0">

				<mx:Button id="boldButton" width="20" toggle="true"
						   icon="@Embed('assets/icon_style_bold.png')"
						   click="boldSelected=!boldSelected;setTextStyles('bold', boldSelected);" /> 
				
				<mx:Button id="italicButton" width="20" toggle="true"
						   icon="@Embed('assets/icon_style_italic.png')"
						   click="italicSelected=!italicSelected;setTextStyles('italic', italicSelected);" /> 
				
				<mx:Button id="underlineButton" width="20" toggle="true"
						   icon="@Embed('assets/icon_style_underline.png')"
						   click="underlineSelected=!underlineSelected;setTextStyles('underline', underlineSelected);" /> 

			</mx:HBox>
			<mx:HBox verticalScrollPolicy="off" horizontalScrollPolicy="off" horizontalGap="0">
				<mx:ColorPicker enabled="{this.colorEnabled}" id="colorPicker" width="22" height="22"
						close="setTextStyles('color');" change="{isUsingColor=true}"/>
				<mx:CheckBox id="useColor" selected="{isUsingColor}" enabled="{this.colorEnabled}"/>
			</mx:HBox>
			

			<mx:VRule height="{alignButtons.height}"/>

			<mx:ToggleButtonBar id="alignButtons" buttonWidth="20"
							itemClick="setTextStyles('align', ToggleButtonBar(event.currentTarget).dataProvider.getItemAt(ToggleButtonBar(event.currentTarget).selectedIndex).action); " >
				<mx:dataProvider>
					<mx:Array> 
						<mx:Object icon="@Embed('assets/icon_align_left.png')" action="left"/>
						<mx:Object icon="@Embed('assets/icon_align_center.png')" action="center"/>
						<mx:Object icon="@Embed('assets/icon_align_right.png')" action="right"/>
						<mx:Object icon="@Embed('assets/icon_align_justify.png')" action="justify"/>
					</mx:Array>
				</mx:dataProvider>
			</mx:ToggleButtonBar>

			<mx:Button id="bulletButton" width="20" toggle="true"
				   icon="@Embed('assets/icon_bullet.png')"
				   click="setTextStyles('bullet', event.currentTarget.selected);" /> 

			<mx:VRule height="{linkTextInput.height}"/>
			<!--<text:LinkEditor id="linkTextInput" width="140"
				change="if (linkTextCommitted) 
						  { linkTextCommitted = false; } 
						  else 
						  { setTextStyles('url', linkTextInput.text);}"
				focusOut="if (linkTextCommitted) 
						  { linkTextCommitted = false; } 
						  else 
						  { setTextStyles('url', linkTextInput.text); linkTextInput.text='';}"
				enter="setTextStyles('url', linkTextInput.text); linkTextCommitted = true;"/>-->
			<mx:TextInput id="linkTextInput" width="140"
				focusOut="if (linkTextCommitted) 
						  { linkTextCommitted = false; } 
						  else 
						  { setTextStyles('url', linkTextInput.text); linkTextInput.text=defaultLinkProtocol;}"
				enter="setTextStyles('url', linkTextInput.text); linkTextInput.text = defaultLinkProtocol; linkTextCommitted = true;">
	    	
		<mx:contextMenu>
			<!--<ui:ContextMenu customItems="{LinkMenuManager.getInstance().contextMenuItems}">-->
	    	<ui:ContextMenu customItems="{[siteURLSelect.menuItem,generateURLSelect.menuItem]}">
	    		<ui:builtInItems>
	    			<ui:ContextMenuBuiltInItems forwardAndBack="false" loop="false" play="false" print="false" quality="false" rewind="false" save="false" zoom="false"/>
	    		</ui:builtInItems>
	    	</ui:ContextMenu>
	    </mx:contextMenu>
	    	</mx:TextInput>
			
		</mx:ToolBar>

	</mx:ControlBar>
	<context:SiteURLSelect id="siteURLSelect" urlSelect="{linkTextInput.text = String(event.data)}" />
	<context:URLGenerateSelect id="generateURLSelect" urlSelect="{linkTextInput.text = String(event.data)}" />
</mx:VBox>
